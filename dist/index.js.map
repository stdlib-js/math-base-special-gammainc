{
  "version": 3,
  "sources": ["../lib/finite_gamma_q.js", "../lib/finite_half_gamma_q.js", "../lib/full_igamma_prefix.js", "../lib/polyval_c0.js", "../lib/polyval_c1.js", "../lib/polyval_c2.js", "../lib/polyval_c3.js", "../lib/polyval_c4.js", "../lib/polyval_c5.js", "../lib/polyval_c6.js", "../lib/polyval_c7.js", "../lib/polyval_c8.js", "../lib/igamma_temme_large.js", "../lib/lower_incomplete_gamma_series.js", "../lib/lower_gamma_series.js", "../lib/regularised_gamma_prefix.js", "../lib/small_gamma2_series.js", "../lib/tgamma_small_upper_part.js", "../lib/upper_incomplete_gamma_fract.js", "../lib/upper_gamma_fraction.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math-base-special-exp' );\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is an integer.\n*\n* @private\n* @param {integer} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteGammaQ( a, x ) {\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = exp( -x );\n\tsum = e;\n\tif ( sum !== 0.0 ) {\n\t\tterm = sum;\n\t\tfor ( n = 1; n < a; ++n ) {\n\t\t\tterm /= n;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = finiteGammaQ;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar erfc = require( '@stdlib/math-base-special-erfc' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is a half-integer.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteHalfGammaQ( a, x ) {\n\tvar half;\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = erfc( sqrt(x) );\n\tif ( e !== 0 && a > 1.0 ) {\n\t\tterm = exp( -x ) / sqrt( PI * x );\n\t\tterm *= x;\n\t\thalf = 0.5;\n\t\tterm /= half;\n\t\tsum = term;\n\t\tfor ( n = 2; n < a; ++n ) {\n\t\t\tterm /= n - half;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t\te += sum;\n\t}\n\treturn e;\n}\n\n\n// EXPORTS //\n\nmodule.exports = finiteHalfGammaQ;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar MIN_LN = require( '@stdlib/constants-float64-min-ln' );\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse {\n\t\t/* eslint-disable no-lonely-if */\n\t\tif ( alz > MIN_LN ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( z/a < MAX_LN ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t} else {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fullIGammaPrefix;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333333333;\n\t}\n\treturn -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.001851851851851852;\n\t}\n\treturn -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.004133597883597883;\n\t}\n\treturn 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0006494341563786008;\n\t}\n\treturn 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0008618882909167117;\n\t}\n\treturn -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.00033679855336635813;\n\t}\n\treturn -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0005313079364639922;\n\t}\n\treturn 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.00034436760689237765;\n\t}\n\treturn 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0006526239185953094;\n\t}\n\treturn -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar evalpoly = require( '@stdlib/math-base-tools-evalpoly' );\nvar log1pmx = require( '@stdlib/math-base-special-log1pmx' );\nvar erfc = require( '@stdlib/math-base-special-erfc' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar TWO_PI = require( '@stdlib/constants-float64-two-pi' );\nvar polyvalC0 = require( './polyval_c0.js' );\nvar polyvalC1 = require( './polyval_c1.js' );\nvar polyvalC2 = require( './polyval_c2.js' );\nvar polyvalC3 = require( './polyval_c3.js' );\nvar polyvalC4 = require( './polyval_c4.js' );\nvar polyvalC5 = require( './polyval_c5.js' );\nvar polyvalC6 = require( './polyval_c6.js' );\nvar polyvalC7 = require( './polyval_c7.js' );\nvar polyvalC8 = require( './polyval_c8.js' );\n\n\n// VARIABLES //\n\n// Pre-allocate workspace array:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} value of asymptotic expansion\n*/\nfunction igammaTemmeLarge( a, x ) {\n\tvar result;\n\tvar sigma;\n\tvar phi;\n\tvar y;\n\tvar z;\n\n\tsigma = ( x-a ) / a;\n\tphi = -log1pmx( sigma );\n\ty = a * phi;\n\tz = sqrt( 2.0 * phi );\n\tif ( x < a ) {\n\t\tz = -z;\n\t}\n\tworkspace[ 0 ] = polyvalC0( z );\n\tworkspace[ 1 ] = polyvalC1( z );\n\tworkspace[ 2 ] = polyvalC2( z );\n\tworkspace[ 3 ] = polyvalC3( z );\n\tworkspace[ 4 ] = polyvalC4( z );\n\tworkspace[ 5 ] = polyvalC5( z );\n\tworkspace[ 6 ] = polyvalC6( z );\n\tworkspace[ 7 ] = polyvalC7( z );\n\tworkspace[ 8 ] = polyvalC8( z );\n\tworkspace[ 9 ] = -0.00059676129019274625;\n\tresult = evalpoly( workspace, 1.0/a );\n\tresult *= exp( -y ) / sqrt( TWO_PI * a );\n\tif ( x < a ) {\n\t\tresult = -result;\n\t}\n\tresult += erfc( sqrt(y) ) / 2.0;\n\treturn result;\n}\n\n\n// EXPORTS //\n\nmodule.exports = igammaTemmeLarge;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the incomplete gamma function.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction lowerIncompleteGammaSeries( a1, z1 ) {\n\tvar result = 1.0;\n\tvar a = a1;\n\tvar z = z1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result;\n\t\ta += 1.0;\n\t\tresult *= z/a;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = lowerIncompleteGammaSeries;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sumSeries = require( '@stdlib/math-base-tools-sum-series' );\nvar lowerIncompleteGammaSeries = require( './lower_incomplete_gamma_series.js' );\n\n\n// MAIN //\n\n/**\n* Sums elements of the series expansion of the lower incomplete gamma function.\n*\n* ## Method\n*\n* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.\n* -   Divide by `tgamma(a)` to get the normalized value.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @param {number} initialValue - initial value of the resulting sum\n* @returns {number} sum of terms of lower gamma series\n*/\nfunction lowerGammaSeries( a, z, initialValue ) {\n\tvar result;\n\tvar s;\n\n\tinitialValue = initialValue || 0.0;\n\ts = lowerIncompleteGammaSeries( a, z );\n\tresult = sumSeries( s, {\n\t\t'initialValue': initialValue\n\t});\n\treturn result;\n}\n\n\n// EXPORTS //\n\nmodule.exports = lowerGammaSeries;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar gamma = require( '@stdlib/math-base-special-gamma' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar MIN_LN = require( '@stdlib/constants-float64-min-ln' );\nvar G = require( '@stdlib/constants-float64-gamma-lanczos-g' );\nvar E = require( '@stdlib/constants-float64-e' );\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nmodule.exports = regularisedGammaPrefix;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n/**\n* Series representation for upper fraction when `z` is small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {Function} series function\n*/\nfunction smallGamma2Series( a, x ) {\n\tvar result;\n\tvar apn;\n\tvar n;\n\tvar r;\n\n\tresult = -x;\n\tx = -x;\n\tapn = a + 1.0;\n\tn = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tr = result / apn;\n\t\tresult *= x;\n\t\tn += 1;\n\t\tresult /= n;\n\t\tapn += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = smallGamma2Series;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar powm1 = require( '@stdlib/math-base-special-powm1' );\nvar sumSeries = require( '@stdlib/math-base-tools-sum-series' );\nvar gamma1pm1 = require( '@stdlib/math-base-special-gamma1pm1' );\nvar smallGamma2Series = require( './small_gamma2_series.js' );\n\n\n// MAIN //\n\n/**\n* Compute the full upper fraction (Q) when `a` is very small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated\n* @returns {Array} full upper fraction (Q) and pgam\n*/\nfunction tgammaSmallUpperPart( a, x, invert ) {\n\tvar initialValue;\n\tvar result;\n\tvar pgam;\n\tvar p;\n\tvar s;\n\n\tresult = gamma1pm1( a );\n\tpgam = ( result + 1.0 ) / a;\n\tp = powm1( x, a );\n\tresult -= p;\n\tresult /= a;\n\ts = smallGamma2Series( a, x );\n\tp += 1.0;\n\tinitialValue = ( invert ) ? pgam : 0.0;\n\tresult = -p * sumSeries( s, {\n\t\t'initialValue': (initialValue - result) / p\n\t});\n\tif ( invert ) {\n\t\tresult = -result;\n\t}\n\treturn [ result, pgam ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = tgammaSmallUpperPart;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction upperIncompleteGammaFract( a1, z1 ) {\n\tvar z = z1 - a1 + 1.0;\n\tvar a = a1;\n\tvar k = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tk += 1;\n\t\tz += 2.0;\n\t\treturn [\n\t\t\tk * (a - k),\n\t\t\tz\n\t\t];\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = upperIncompleteGammaFract;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar continuedFraction = require( '@stdlib/math-base-tools-continued-fraction' );\nvar upperIncompleteGammaFract = require( './upper_incomplete_gamma_fract.js' );\n\n\n// MAIN //\n\n/**\n* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} function value\n*/\nfunction upperGammaFraction( a, z ) {\n\tvar f = upperIncompleteGammaFract( a, z );\n\treturn 1.0 / ( z - a + 1.0 + continuedFraction( f ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = upperGammaFraction;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar gamma = require( '@stdlib/math-base-special-gamma' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar SQRT_EPSILON = require( '@stdlib/constants-float64-sqrt-eps' );\nvar FLOAT64_MAX = require( '@stdlib/constants-float64-max' );\nvar SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar finiteGammaQ = require( './finite_gamma_q.js' );\nvar finiteHalfGammaQ = require( './finite_half_gamma_q.js' );\nvar fullIGammaPrefix = require( './full_igamma_prefix.js' );\nvar igammaTemmeLarge = require( './igamma_temme_large.js' );\nvar lowerGammaSeries = require( './lower_gamma_series.js' );\nvar regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );\nvar tgammaSmallUpperPart = require( './tgamma_small_upper_part.js' );\nvar upperGammaFraction = require( './upper_gamma_fraction.js' );\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.\n*\n* ## Notes\n*\n* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.\n*\n* @param {NonNegativeNumber} x - function parameter\n* @param {PositiveNumber} a - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function\n* @returns {number} function value\n*/\nfunction gammainc( x, a, regularized, upper ) {\n\tvar optimisedInvert;\n\tvar normalized;\n\tvar evalMethod;\n\tvar initValue;\n\tvar isHalfInt;\n\tvar useTemme;\n\tvar isSmallA;\n\tvar invert;\n\tvar result;\n\tvar isInt;\n\tvar sigma;\n\tvar gam;\n\tvar res;\n\tvar fa;\n\tvar g;\n\n\tif ( x < 0.0 || a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tnormalized = ( regularized === void 0 ) ? true : regularized;\n\tinvert = upper;\n\tresult = 0.0;\n\tif ( a >= MAX_FACTORIAL && !normalized ) {\n\t\tif ( invert && ( a * 4.0 < x ) ) {\n\t\t\t// This is method 4 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tresult += ln( upperGammaFraction( a, x ) );\n\t\t}\n\t\telse if ( !invert && ( a > 4.0 * x ) ) {\n\t\t\t// This is method 2 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tinitValue = 0;\n\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a );\n\t\t}\n\t\telse {\n\t\t\tresult = gammainc( a, x, true, invert );\n\t\t\tif ( result === 0.0 ) {\n\t\t\t\tif ( invert ) {\n\t\t\t\t\t// Try http://functions.wolfram.com/06.06.06.0039.01\n\t\t\t\t\tresult = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );\n\t\t\t\t\tresult = ln( result ) - a + ( ( a-0.5 ) * ln(a) );\n\t\t\t\t\tresult += ln( SQRT_TWO_PI );\n\t\t\t\t} else {\n\t\t\t\t\t// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:\n\t\t\t\t\tresult = ( a * ln( x ) ) - x;\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = ln( result ) + gammaln( a );\n\t\t\t}\n\t\t}\n\t\tif ( result > MAX_LN ) {\n\t\t\treturn PINF;\n\t\t}\n\t\treturn exp( result );\n\t}\n\tisSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < MAX_LN );\n\tif ( isSmallA ) {\n\t\tfa = floor( a );\n\t\tisInt = ( fa === a );\n\t\tisHalfInt = ( isInt ) ? false : ( abs( fa - a ) === 0.5 );\n\t} else {\n\t\tisInt = isHalfInt = false;\n\t}\n\tif ( isInt && x > 0.6 ) {\n\t\t// Calculate Q via finite sum:\n\t\tinvert = !invert;\n\t\tevalMethod = 0;\n\t}\n\telse if ( isHalfInt && x > 0.2 ) {\n\t\t// Calculate Q via finite sum for half integer a:\n\t\tinvert = !invert;\n\t\tevalMethod = 1;\n\t}\n\telse if ( x < SQRT_EPSILON && a > 1.0 ) {\n\t\tevalMethod = 6;\n\t}\n\telse if ( x < 0.5 ) {\n\t\t// Changeover criterion chosen to give a changeover at Q ~ 0.33:\n\t\tif ( -0.4 / ln( x ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse if ( x < 1.1 ) {\n\t\t// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:\n\t\tif ( x * 0.75 < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse {\n\t\t// Begin by testing whether we're in the \"bad\" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:\n\t\tuseTemme = false;\n\t\tif ( normalized && a > 20 ) {\n\t\t\tsigma = abs( (x-a)/a );\n\t\t\tif ( a > 200 ) {\n\t\t\t\t// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.\n\t\t\t\tif ( 20 / a > sigma * sigma ) {\n\t\t\t\t\tuseTemme = true;\n\t\t\t\t}\n\t\t\t} else if ( sigma < 0.4 ) {\n\t\t\t\tuseTemme = true;\n\t\t\t}\n\t\t}\n\t\tif ( useTemme ) {\n\t\t\tevalMethod = 5;\n\t\t}\n\t\t// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.\n\t\telse if ( x - ( 1.0 / (3.0 * x) ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 4;\n\t\t\tinvert = !invert;\n\t\t}\n\t}\n\n\t/* eslint-disable default-case */\n\tswitch ( evalMethod ) {\n\tcase 0:\n\t\tresult = finiteGammaQ( a, x );\n\t\tif (normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 1:\n\t\tresult = finiteHalfGammaQ( a, x );\n\t\tif ( normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\t// Compute P:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0.0 ) {\n\t\t\tinitValue = 0.0;\n\t\t\toptimisedInvert = false;\n\t\t\tif ( invert ) {\n\t\t\t\tinitValue = ( normalized ) ? 1.0 : gamma( a );\n\t\t\t\tif (\n\t\t\t\t\tnormalized ||\n\t\t\t\t\tresult >= 1.0 ||\n\t\t\t\t\tFLOAT64_MAX * result > initValue\n\t\t\t\t) {\n\t\t\t\t\tinitValue /= result;\n\t\t\t\t\tif (\n\t\t\t\t\t\tnormalized ||\n\t\t\t\t\t\ta < 1.0 ||\n\t\t\t\t\t\t( FLOAT64_MAX / a > initValue )\n\t\t\t\t\t) {\n\t\t\t\t\t\tinitValue *= -a;\n\t\t\t\t\t\toptimisedInvert = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult *= lowerGammaSeries( a, x, initValue ) / a;\n\t\tif ( optimisedInvert ) {\n\t\t\tinvert = false;\n\t\t\tresult = -result;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\t// Compute Q:\n\t\tinvert = !invert;\n\t\tres = tgammaSmallUpperPart( a, x, invert );\n\t\tresult = res[ 0 ];\n\t\tg = res[ 1 ];\n\t\tinvert = false;\n\t\tif ( normalized ) {\n\t\t\tresult /= g;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\t// Compute Q:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0 ) {\n\t\t\tresult *= upperGammaFraction( a, x );\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tresult = igammaTemmeLarge( a, x );\n\t\tif ( x >= a ) {\n\t\t\tinvert = !invert;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\t// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/\n\t\tresult = ( normalized ) ?\n\t\t\tpow(x, a) / gamma( a + 1.0 ) :\n\t\t\tpow( x, a ) / a;\n\t\tresult *= 1.0 - ( a * x / ( a + 1.0 ) );\n\t\tbreak;\n\t}\n\tif ( normalized && result > 1.0 ) {\n\t\tresult = 1.0;\n\t}\n\tif ( invert ) {\n\t\tgam = ( normalized ) ? 1.0 : gamma( a );\n\t\tresult = gam - result;\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gammainc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the incomplete gamma function.\n*\n* @module @stdlib/math-base-special-gammainc\n*\n* @example\n* var gammainc = require( '@stdlib/math-base-special-gammainc' );\n*\n* var v = gammainc( 6.0, 2.0 );\n* // returns ~0.9826\n*\n* v = gammainc( 1.0, 2.0, true, true );\n* // returns ~0.7358\n*\n* v = gammainc( 7.0, 5.0 );\n* // returns ~0.8270\n*\n* v = gammainc( 7.0, 5.0, false );\n* // returns ~19.8482\n*\n* v = gammainc( NaN, 2.0 );\n* // returns NaN\n*\n* v = gammainc( 6.0, NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_finite_gamma_q", "__commonJSMin", "exports", "module", "exp", "finiteGammaQ", "a", "x", "term", "sum", "e", "n", "require_finite_half_gamma_q", "__commonJSMin", "exports", "module", "erfc", "sqrt", "exp", "PI", "finiteHalfGammaQ", "a", "x", "half", "term", "sum", "e", "n", "require_full_igamma_prefix", "__commonJSMin", "exports", "module", "exp", "pow", "ln", "MAX_LN", "MIN_LN", "fullIGammaPrefix", "a", "z", "prefix", "alz", "require_polyval_c0", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c1", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c2", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c3", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c4", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c5", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c6", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c7", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_c8", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_igamma_temme_large", "__commonJSMin", "exports", "module", "evalpoly", "log1pmx", "erfc", "sqrt", "exp", "TWO_PI", "polyvalC0", "polyvalC1", "polyvalC2", "polyvalC3", "polyvalC4", "polyvalC5", "polyvalC6", "polyvalC7", "polyvalC8", "workspace", "igammaTemmeLarge", "a", "x", "result", "sigma", "phi", "y", "z", "require_lower_incomplete_gamma_series", "__commonJSMin", "exports", "module", "lowerIncompleteGammaSeries", "a1", "z1", "result", "a", "z", "next", "r", "require_lower_gamma_series", "__commonJSMin", "exports", "module", "sumSeries", "lowerIncompleteGammaSeries", "lowerGammaSeries", "a", "z", "initialValue", "result", "s", "require_regularised_gamma_prefix", "__commonJSMin", "exports", "module", "lanczosSumExpGScaled", "gammaln", "gamma", "log1p", "sqrt", "abs", "exp", "pow", "max", "min", "ln", "MAX_LN", "MIN_LN", "G", "E", "regularisedGammaPrefix", "a", "z", "prefix", "amza", "agh", "alz", "amz", "sq", "d", "require_small_gamma2_series", "__commonJSMin", "exports", "module", "smallGamma2Series", "a", "x", "result", "apn", "n", "r", "next", "require_tgamma_small_upper_part", "__commonJSMin", "exports", "module", "powm1", "sumSeries", "gamma1pm1", "smallGamma2Series", "tgammaSmallUpperPart", "a", "x", "invert", "initialValue", "result", "pgam", "p", "s", "require_upper_incomplete_gamma_fract", "__commonJSMin", "exports", "module", "upperIncompleteGammaFract", "a1", "z1", "z", "a", "k", "next", "require_upper_gamma_fraction", "__commonJSMin", "exports", "module", "continuedFraction", "upperIncompleteGammaFract", "upperGammaFraction", "a", "z", "f", "require_main", "__commonJSMin", "exports", "module", "gammaln", "floor", "gamma", "abs", "exp", "pow", "ln", "SQRT_EPSILON", "FLOAT64_MAX", "SQRT_TWO_PI", "MAX_LN", "PINF", "finiteGammaQ", "finiteHalfGammaQ", "fullIGammaPrefix", "igammaTemmeLarge", "lowerGammaSeries", "regularisedGammaPrefix", "tgammaSmallUpperPart", "upperGammaFraction", "MAX_FACTORIAL", "gammainc", "x", "a", "regularized", "upper", "optimisedInvert", "normalized", "evalMethod", "initValue", "isHalfInt", "useTemme", "isSmallA", "invert", "result", "isInt", "sigma", "gam", "res", "fa", "g", "main"]
}
